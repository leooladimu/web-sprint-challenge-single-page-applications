{"version":3,"sources":["Order.js","formSchema.js","App.js","index.js"],"names":["Order","details","className","name","size","originalRed","garlicRanch","bbqSauce","spinachAlfredo","special","toppings","length","map","like","idx","formSchema","yup","shape","trim","required","min","oneOf","sauce","pepperoni","sausage","canadianBacon","spiceyItalianSausage","initialFormValues","initialFormErrors","initialOrders","App","useState","orders","setOrders","formValues","setFormValues","formErrors","setFormErrors","disabled","setDisabled","useEffect","axios","get","then","res","data","catch","err","console","error","schema","isValid","valid","values","change","value","validate","errors","submit","newOrder","post","postNewOrder","filter","topping","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdd8194e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Order({ details }) {\n  if (!details) {\n    return <h3>Getting your order&apos;s details...</h3>\n  }\n\n  return (\n    <div className='order container'>\n      <h2>{details.name}</h2>\n      <p>Size: {details.size}</p>\n      <p>Original Red: {details.originalRed}</p>\n      <p>Garlic Ranch: {details.garlicRanch}</p>\n      <p>BBQ Sauce: {details.bbqSauce}</p>\n      <p>Spinach Alfredo: {details.spinachAlfredo}</p>\n      <p>special: {details.special}</p>\n      {\n        !!details.toppings && !!details.toppings.length &&\n        <div>\n          toppings:\n          <ul>\n            {details.toppings.map((like, idx) => <li key={idx}>{like}</li>)}\n          </ul>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Order;\n","import * as yup from 'yup';\n\nconst formSchema = yup.object().shape({\n    name: yup\n        .string()\n        .trim()\n        .required('Name is required!')\n        .min(2, 'Name must be 3 characters long!'),\n    // special: yup\n    //     .string()\n    //     .special('Pick!')\n    //     .required('Pick!'),\n    size: yup\n        .string()\n        .oneOf(['small', 'medium', 'large', 'Pick one!']),\n    sauce: yup\n        .string()\n        .oneOf(['Original Red', 'Garlic Ranch', 'BBQ Sauce', 'Spinach Alfredo'], 'Civil status is required!'),\n    \n    pepperoni: yup.boolean(),\n    sausage: yup.boolean(),\n    canadianBacon: yup.boolean(),spiceyItalianSausage: yup.boolean()\n})\n\nexport default formSchema;","import React, { useState, useEffect } from 'react';\n import Order from './Order';\nimport schema from './formSchema';\nimport axios from 'axios';\nimport * as yup from 'yup';\n\nconst initialFormValues = {\n  ///// TEXT INPUTS ///// username\n  name: '',\n  ///// DROPDOWN /////  role\n  size: '',\n  ///// RADIO BUTTONS ///// civil\n  originalRed: '',\n  garlicRanch: '',\n  bbqSauce: '',\n  spinachAlfredo: '',\n  ///// CHECKBOXES ///// hobbies\n  pepperoni: false,\n  sausage: false,\n  canadianBacon: false,\n  spiceyItalianSausage: false,\n  // text input // email\n  special: '',\n}\n\nconst initialFormErrors = {\n  name: '',\n  size: '',\n  pepperoni: '',\n  sausage: '',\n  canadianBacon: '',\n  spiceyItalianSausage: '',\n  special: '',\n}\n\nconst initialOrders = []\nconst initialDisabled = true\n\nexport default function App() {\n\n  const [orders, setOrders] = useState(initialOrders)          // array of friend objects\n  const [formValues, setFormValues] = useState(initialFormValues) // object\n  const [formErrors, setFormErrors] = useState(initialFormErrors) // object\n  const [disabled, setDisabled] = useState(initialDisabled)       // boolean\n\n  const getOrders = () => {\n    // ðŸ”¥ STEP 5- IMPLEMENT! ON SUCCESS PUT FRIENDS IN STATE\n    //    helper to [GET] all friends from `http://buddies.com/api/friends`\n    axios.get('https://reqres.in/api/orders')\n      .then(res => {\n        setOrders(res.data);\n      }).catch(err => console.error(err))\n  }\n\n\n  const postNewOrder = newOrder => {\n    // ðŸ”¥ STEP 6- IMPLEMENT! ON SUCCESS ADD NEWLY CREATED FRIEND TO STATE\n    //    helper to [POST] `newFriend` to `http://buddies.com/api/friends`\n    //    and regardless of success or failure, the form should reset\n    axios.post('https://reqres.in/api/orders`', newOrder)\n      .then(res => {\n        setOrders([res.data, ...orders]);\n        setFormValues(initialFormValues);\n      }).catch(err => {\n        console.error(err);\n        setFormValues(initialFormValues);\n      })\n  }\n\n  //////////////// EVENT HANDLERS ////////////////\n  //////////////// EVENT HANDLERS ////////////////\n  //////////////// EVENT HANDLERS ////////////////\n  const validate = (name, value) => {\n    yup.reach(schema, name)\n      .validate(value)\n      .then(() => setFormErrors({ ...formErrors, [name]: '' }))\n      .catch(err => setFormErrors({ ...formErrors, [name]: err.errors[0] }))\n  }\n\n  const inputChange = (name, value) => {\n    //  STEP 10- RUN VALIDATION WITH YUP\n    validate(name, value);\n    setFormValues({\n      ...formValues,\n      [name]: value // NOT AN ARRAY\n    })\n  }\n\n  const formSubmit = () => {\n    const newOrder = {\n      name: formValues.name.trim(),\n      size: formValues.size.trim(),\n      originalRed: formValues.originalRed.trim(),\n      garlicRanch: formValues.garlicRanch.trim(),\n      bbqSauce: formValues.bbqSauce.trim(),\n      spinachAlfredo: formValues.spinachAlfredo.trim(),\n      special: formValues.special.trim(),\n      toppings: ['pepperoni', 'sausage', 'canadianBacon', 'spiceyItalianSausage'].filter(topping => !!formValues[topping])\n    }\n\n    postNewOrder(newOrder);\n  }\n\n  useEffect(() => {\n    getOrders()\n  }, [])\n\n  useEffect(() => {\n    // ðŸ”¥ STEP 9- ADJUST THE STATUS OF `disabled` EVERY TIME `formValues` CHANGES\n    schema.isValid(formValues).then(valid => setDisabled(!valid))\n  }, [formValues])\n\n  return (\n    <div className='container'>\n      <header><h1>Build Your Own Pizza</h1></header>\n\n      <Order\n        values={formValues}\n        change={inputChange}\n        submit={formSubmit}\n        disabled={disabled}\n        errors={formErrors}\n      />\n\n      {/* {\n        orders.map(order => {\n          return (\n            <Order key={order.id} details={order} />\n          )\n        })\n      } */}\n    </div>\n  )\n}\n\n\n//   return (\n//     <>\n//       <h1>Lambda Eats</h1>\n//       <p>You can remove this code and create your own header</p>\n//     </>\n//   );\n// };\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}